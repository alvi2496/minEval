from paradigms.verification import graph

def represent(result):
	print("---------------------------------------------------")
	print("Spliting dataset into train and test")
	print("***************************************************")
	for algo in result['algorithms']:
		print(result['algorithms'][algo]['display_name'])
		for vt in result['algorithms'][algo]['verification_methods']['split']['feature_vectors']:
			print("With", result['algorithms'][algo]['verification_methods']['split']['feature_vectors'][vt]['display_name'], ":", \
			 result['algorithms'][algo]['verification_methods']['split']['feature_vectors'][vt]['value'])
		print("###################################################")
	print("---------------------------------------------------")		

	# print("Decision Tree:")
	# print("With Count Vector:", result['split']['decision_tree']['count_vector'])
	# print("with TF-IDF vector:", result['split']['decision_tree']['tf_idf_vector'])
	# print("###################################################")
	# print("Naive Bayes:")
	# print("With Count Vector:", result['split']['naive_bayes']['count_vector'])
	# print("with TF-IDF vector:", result['split']['naive_bayes']['tf_idf_vector'])
	# print("###################################################")
	# print("Random Forest:")
	# print("With Count Vector:", result['split']['random_forest']['count_vector'])
	# print("with TF-IDF vector:", result['split']['random_forest']['tf_idf_vector'])
	# print("###################################################")
	# print("Support Vector Machine: ")
	# print("With Count Vector:", result['split']['svm']['count_vector'])
	# print("with TF-IDF vector:", result['split']['svm']['tf_idf_vector'])
	# print("###################################################")
	# print("Logistic Regression: ")
	# print("With Count Vector:", result['split']['logistic_regression']['count_vector'])
	# print("with TF-IDF vector:", result['split']['logistic_regression']['tf_idf_vector'])
	# print("---------------------------------------------------")

	print("---------------------------------------------------")
	print("Cross validation")
	print("***************************************************")
	for algo in result['algorithms']:
		print(result['algorithms'][algo]['display_name'])
		for vt in result['algorithms'][algo]['verification_methods']['cross']['feature_vectors']:
			print("With", result['algorithms'][algo]['verification_methods']['cross']['feature_vectors'][vt]['display_name'], ":", \
			 result['algorithms'][algo]['verification_methods']['cross']['feature_vectors'][vt]['value'])
		print("###################################################")
	print("---------------------------------------------------")
	# print("Decision Tree")
	# print("Using Count Vector")
	# print("Result of cross validation:", result['cross']['decision_tree']['count_vector']['array'])
	# print("Average of cross validation:", result['cross']['decision_tree']['count_vector']['mean'])
	# print("Using TF-IDF Vector")
	# print("Result of cross validation:", result['cross']['decision_tree']['tf_idf_vector']['array'])
	# print("Average of cross validation:", result['cross']['decision_tree']['tf_idf_vector']['mean'])
	# print("###################################################")
	# print("Naive Bayes")
	# print("Using Count Vector")
	# print("Result of cross validation:", result['cross']['naive_bayes']['count_vector']['array'])
	# print("Average of cross validation:", result['cross']['naive_bayes']['count_vector']['mean'])
	# print("Using TF-IDF Vector")
	# print("Result of cross validation:", result['cross']['naive_bayes']['tf_idf_vector']['array'])
	# print("Average of cross validation:", result['cross']['naive_bayes']['tf_idf_vector']['mean'])
	# print("###################################################")
	# print("Random Forest")
	# print("Using Count Vector")
	# print("Result of cross validation:", result['cross']['random_forest']['count_vector']['array'])
	# print("Average of cross validation:", result['cross']['random_forest']['count_vector']['mean'])
	# print("Using TF-IDF Vector")
	# print("Result of cross validation:", result['cross']['random_forest']['tf_idf_vector']['array'])
	# print("Average of cross validation:", result['cross']['random_forest']['tf_idf_vector']['mean'])
	# print("###################################################")
	# print("Support Vector Machine")
	# print("Using Count Vector")
	# print("Result of cross validation:", result['cross']['svm']['count_vector']['array'])
	# print("Average of cross validation:", result['cross']['svm']['count_vector']['mean'])
	# print("Using TF-IDF Vector")
	# print("Result of cross validation:", result['cross']['svm']['tf_idf_vector']['array'])
	# print("Average of cross validation:", result['cross']['svm']['tf_idf_vector']['mean'])
	# print("###################################################")
	# print("Logistic Regression")
	# print("Using Count Vector")
	# print("Result of cross validation:", result['cross']['logistic_regression']['count_vector']['array'])
	# print("Average of cross validation:", result['cross']['logistic_regression']['count_vector']['mean'])
	# print("Using TF-IDF Vector")
	# print("Result of cross validation:", result['cross']['logistic_regression']['tf_idf_vector']['array'])
	# print("Average of cross validation:", result['cross']['logistic_regression']['tf_idf_vector']['mean'])
	# print("---------------------------------------------------")

	graph.show(result)